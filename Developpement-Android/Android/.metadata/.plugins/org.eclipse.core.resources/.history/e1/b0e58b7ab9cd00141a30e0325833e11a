//==================================================//
//= 			MainActivity.java 				 ===//
//= 				06/02/15					 ===//
//=				Yannick Riou EII3 				 ===//
//= 		Second Activity that let the user	 ===//
//=		send/receive commands to/from the drone  ===//
//= 				ENSSATÂ©			     		 ===//
//==================================================//

// Name of the application's package
package com.projeteii3.enssatdrone;

// Import various libraries, press ctrl+shift+o to update
import java.io.IOException;
import java.io.InputStream;
import java.util.UUID;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;


// Main activity class 
public class MainActivity extends Activity {

	
	//---- User Interface Components Definition ----//
	//* Control Buttons 
    private Button mUpButton;
    private Button mStopButton;
    private Button mLeftButton;
    private Button mRightButton;
    private Button mDownButton;
    
    //** Function Buttons
    // Disconnect or take picture with image background
    private ImageButton mBtnDisconnect;
	private ImageButton mBtnTakePicture;
	
	 //*** Image that appear when obstacle is too close
    ImageView ObstacleWarning;
    
    // Image received from camera
    ImageView jpgView;
    
    // Dialog Box for obstacle avoidance
    AlertDialog.Builder AlertObsFront;
    AlertDialog.Builder AlertObsBack;
    
    // Path to jpg image
    String myJpgPath; 
    
    //**** Text that show the message received from the drone
    private TextView mTxtReceive;	
	
    //***** Progress bar that show the status of bluetooth connection
	private ProgressDialog progressDialog;
	//---- END ----//
	
	
    // Buffer to store received data from drone
    private String strInput;
    
    // Prefix for the drone frame
    // Each frame going to the drone is : "!drone!cmd"
    private String FramePrefix = "!drone!";
	
    // Debug tag to identify various message
    // Use Log.d(TAG,"Message") to write something to the LogCat (see window below)
    private static final String TAG = "Debug-MainActivity";
  
    // Device UUID needed for Bluetooth communication
    // Unique ID that identify a bluetooth connection 
    // Standard SPP (Serial Port Profile) UUID : 00001101-0000-1000-8000-00805F9B34FB 
    // For UART communication per example
	private UUID mDeviceUUID;

	// Bluetooth socket to initiate communication between two devices
	private BluetoothSocket mBTSocket;
	
	// Thread to read the data incoming
	// Avoid blocking MainActivity while waiting for data
	private ReadInput mReadThread = null;
	
	// Used to disconnect the application from the drone
	private boolean mIsUserInitiatedDisconnect = false;

	// Variable to know if bluetooth is connected 
	private boolean mIsBluetoothConnected = false;
	
	// Get bluetooth device from the first activity (name,address,etc)
	private BluetoothDevice mDevice;


	// Method called when MainActivity is created (after user clicked on connect on homescreen activity)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
    	super.onCreate(savedInstanceState);
    	
    	// For more information, take a look at: ProjectFolder/EnssatDrone/res/layout/activity_main.xml
		setContentView(R.layout.activity_main);
		 getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		 
		// Get information given by Homescreen Activity
		// Get bluetooth device and UUID
		Intent intent = getIntent();
		Bundle b = intent.getExtras();
		mDevice = b.getParcelable(Homescreen.DEVICE_EXTRA);
		mDeviceUUID = UUID.fromString(b.getString(Homescreen.DEVICE_UUID));

		Log.d(TAG, "Ready");

		// Setup the User Interface by instanciating the buttons, etc. 
        setupUI();
       
        
        //Create the Yes/No message box
        AlertObsFront = new AlertDialog.Builder(this);
        AlertObsBack = new AlertDialog.Builder(this);
    	
        
        AlertObsBack
		.setTitle("Obstacle On The Back Of Robot")
    	.setMessage("Activate AutoAvoid Mode ?")
    	.setIcon(android.R.drawable.ic_dialog_alert)
    	.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
    	    public void onClick(DialogInterface dialog, int which) {			      	
    	    	//Yes button clicked, do something
    	    	sendBTMsg("!drone!avoidOKB");
    	    	
    	    }
    	})
    	.setNegativeButton("No", null);						//Do nothing on no
    	
    	
    	AlertObsFront
		.setTitle("Obstacle In Front Of Robot")
    	.setMessage("Activate AutoAvoid Mode ?")
    	.setIcon(android.R.drawable.ic_dialog_alert)
    	.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
    	    public void onClick(DialogInterface dialog, int which) {			      	
    	    	//Yes button clicked, do something
    	    	sendBTMsg("!drone!avoidOKF");
    	    	
    	    }
    	})
    	.setNegativeButton("No", null)						//Do nothing on no
    	
		mTxtReceive.setText("Obstacle Avoidance Back");
        
        
       
        Log.d(TAG, "Setup UI Done !");
   }
    
    
    
    // Disconnect the blueotooth by closing the reading inputstream thread 
	private class DisConnectBT extends AsyncTask<Void, Void, Void> {
	
		@Override
		protected Void doInBackground(Void... params) {

			if (mReadThread != null) {
				mReadThread.stop();
				while (mReadThread.isRunning()); // Wait until it stops
				mReadThread = null;

			}

			try {
				mBTSocket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			super.onPostExecute(result);
			mIsBluetoothConnected = false;
			if (mIsUserInitiatedDisconnect) {
				finish();
			}
		}

	}

	// Disconnect Bluetooth if the application is set on pause
	@Override
	protected void onPause() {
		if (mBTSocket != null && mIsBluetoothConnected) {
			new DisConnectBT().execute();
		}
		Log.d(TAG, "Paused");
		super.onPause();
	}

	// Rec-connect the bluetooth if the application is resumed
	@Override
	protected void onResume() {
		if (mBTSocket == null || !mIsBluetoothConnected) {
			new ConnectBT().execute();
		}
		Log.d(TAG, "Resumed");
		super.onResume();
	}

	// When application is stopped
	@Override
	protected void onStop() {
		Log.d(TAG, "Stopped");
		super.onStop();
	}

	// Save current state of the activity 
	@Override
	protected void onSaveInstanceState(Bundle outState) {
		// TODO Auto-generated method stub
		super.onSaveInstanceState(outState);
	}

	
	// Method to connect to bluetooth
	private class ConnectBT extends AsyncTask<Void, Void, Void> {
		private boolean mConnectSuccessful = true;

		@Override
		protected void onPreExecute() {
			progressDialog = ProgressDialog.show(MainActivity.this, "Hold on", "Connecting...");
		}

		@SuppressLint("NewApi") @Override
		protected Void doInBackground(Void... devices) {

			try {
				if (mBTSocket == null || !mIsBluetoothConnected) {
					mBTSocket = mDevice.createInsecureRfcommSocketToServiceRecord(mDeviceUUID);
					BluetoothAdapter.getDefaultAdapter().cancelDiscovery();
					mBTSocket.connect();
				}
			} catch (IOException e) {
				// Unable to connect to device
				e.printStackTrace();
				mConnectSuccessful = false;
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			super.onPostExecute(result);

			if (!mConnectSuccessful) {
				Toast.makeText(getApplicationContext(), "Could not connect to device. Is it a Serial device? Also check if the UUID is correct in the settings", Toast.LENGTH_LONG).show();
				finish();
			} else {
				msg("Connected to device");
				mIsBluetoothConnected = true;
				mReadThread = new ReadInput(); // Kick off input reader
			}

			progressDialog.dismiss();
		}

	}
    
	// Send a message through bluetooth socket 
    private void sendBTMsg(String s)
    {
    	try {
			mBTSocket.getOutputStream().write(s.getBytes());
			Log.d(TAG, "SEND " + s);
		} catch (IOException e) {
			e.printStackTrace();
			msg("Send Message Failed");
		}
    }

    
    // Read input thread 
    // Looping until disconnect
    private class ReadInput implements Runnable {

		private boolean bStop = false;
		private Thread t;

		// Constructor
		public ReadInput() {
			mTxtReceive = (TextView) findViewById(R.id.txtReceive);         
			t = new Thread(this, "Input Thread");
			t.start();
		}

		// Method to verify that the thread is running
		public boolean isRunning() {
			return t.isAlive();
		}

		
		// Main routine of the thread
		@Override
		public void run() {
			InputStream inputStream;

			try {
				// Get the input bluetooth stream from the socket
				inputStream = mBTSocket.getInputStream();
				
				// While the disconnect button isn't pressed
				while (!bStop) 
				{
					// Create temporary buffer to get data from the stream
					byte[] buffer = new byte[256];
					
					if (inputStream.available() > 0) 
					{
						// Put data into buffer
						inputStream.read(buffer);
						int i = 0;
						/*
						 * This is needed because new String(buffer) is taking the entire buffer i.e. 256 chars on Android 2.3.4 http://stackoverflow.com/a/8843462/1287554
						 */
						for (i = 0; i < buffer.length && buffer[i] != 0; i++) {
						}
						strInput = new String(buffer, 0, i);
						
						// needed to update the text from the UI
						runOnUiThread(new Runnable() 
						{
				            @Override
				            public void run() 
				            {
				            	// write what is received in the textview
				            	//mTxtReceive.setText(strInput);
				            	
				            	//Use to show the image received
				    
				            	if(strInput.contains("POK"))
				            	{
				            		
				            		String imageDir = Environment.getExternalStorageDirectory()+"/Pictures/drone_snap.jpg";
				            	    Bitmap myBitmap = BitmapFactory.decodeFile(imageDir);
				            		jpgView.setImageBitmap(myBitmap);
				            		jpgView.setScaleX((float) 1.8);
				            		mTxtReceive.setText("Picture Received");
				            	}	
				            	else if(strInput.contains("!drone!Obs-"))
				            	{
				            		String text = "Obstacle proche ! ("+ strInput.substring(strInput.indexOf('-')+1, strInput.length()) + ")";
				            		mTxtReceive.setText(text);
				            		ObstacleWarning.setVisibility(View.VISIBLE);
				            	}
				            	else if(strInput.contentEquals("!drone!ObsF"))
				            	{
				            		AlertObsFront.show();
				            		mTxtReceive.setText("Obstacle Avoidance Front");
				            	}
				            	else if(strInput.contentEquals("!drone!ObsB"))
				            	{
				            		AlertObsFront.show();
				            	}
				            	else if(strInput.contentEquals("!drone!NObs"))
				            	{
				            		ObstacleWarning.setVisibility(View.INVISIBLE);
				            	}
				            	
				            }
						});
					}
				}
			} 
			catch (IOException e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		// Method to stop the thread main routine when disconnect is pressed
		public void stop() {
			bStop = true;
		}

	}

  
    
    // Setup the UI with Button Actions
    public void setupUI()
    {	
    	 //Use to show the image received
        jpgView = (ImageView)findViewById(R.id.jpgview);
       
        // Initialize the action done when touching the different button
    	
    	// Stop button send : !drone!0
        mStopButton = (Button) findViewById(R.id.button_stop);
        mStopButton.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                // Send a message using content of the edit text widget
            	sendBTMsg(FramePrefix + "0");
            }
        });
        
        // Picture button send : !drone!picture
        mBtnTakePicture = (ImageButton) findViewById(R.id.cameraButton);
        mBtnTakePicture.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                // Send a message using content of the edit text widget
            	
            	sendBTMsg(FramePrefix + "picture");
            }
        });

        // Up button send : !drone!1
        mUpButton = (Button) findViewById(R.id.button_up);
        mUpButton.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                // Send a message using content of the edit text widget
            	sendBTMsg(FramePrefix + "1");
            }
        });
        
        //Left button send : !drone!2
        mLeftButton = (Button) findViewById(R.id.button_left);
        mLeftButton.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                // Send a message using content of the edit text widget
            	sendBTMsg(FramePrefix + "2");
            }
        });
        
        // Right button send : !drone!3
        mRightButton = (Button) findViewById(R.id.button_right);
        mRightButton.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                // Send a message using content of the edit text widget
            	sendBTMsg(FramePrefix + "3");
            }
        });
        
        // Down button send : !drone!4
        mDownButton = (Button) findViewById(R.id.button_down);
        mDownButton.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                // Send a message using content of the edit text widget
            	sendBTMsg(FramePrefix + "4");
            }
        });
        
        // Disconnect button send : !drone!stoprqst
        mBtnDisconnect = (ImageButton) findViewById(R.id.btndisconnect);
        mBtnDisconnect.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				sendBTMsg(FramePrefix + "stoprqst"); // Send Stop command to the drone to avoid moving without tablet connected
				mIsUserInitiatedDisconnect = true;
				new DisConnectBT().execute();
			}
		});
        
        Log.d(TAG, "BTN OK!");
    	// Load the different view for the UI components
        ObstacleWarning = (ImageView) findViewById(R.id.ObstacleWarning);
        ObstacleWarning.setVisibility(View.INVISIBLE);
        
        Log.d(TAG, "Warning ok ");

    }
    
 
    // Fast Way to show a toast
    // toast is a popup message on android
 	private void msg(String s) 
 	{
 		Toast.makeText(getApplicationContext(), s, Toast.LENGTH_SHORT).show();
 	}
 
    
} // End Of Activity 
