package fr.enssat.bluetooth;

import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.view.MotionEventCompat;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public class BluetoothComTest extends Activity {

    // Message types sent from the BluetoothChatService Handler
    public static final int MESSAGE_STATE_CHANGE = 1;
    public static final int MESSAGE_READ = 2;
    public static final int MESSAGE_WRITE = 3;
    public static final int MESSAGE_DEVICE_NAME = 4;
    public static final int MESSAGE_TOAST = 5;

    // Key names received from the BluetoothChatService Handler
    public static final String DEVICE_NAME = "device_name";
    public static final String TOAST = "toast";

    // Intent request codes
    private static final int REQUEST_CONNECT_DEVICE_SECURE = 1;
    private static final int REQUEST_ENABLE_BT = 3;

    // Layout Views
    private Button mStopButton;
    private TextView  ReceivedMessage;
    private TextView DistanceMeasured;
    
    
    boolean flag_stop_pressed = false;

    // Name of the connected device
    private String mConnectedDeviceName = null;
    // String buffer for outgoing messages
    private StringBuffer mOutStringBuffer;
    // Local Bluetooth adapter
    private BluetoothAdapter mBluetoothAdapter = null;
    // Member object for the chat services
    private BluetoothComTestService mChatService = null;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Set up the window layout
        setContentView(R.layout.main);

        // Get local Bluetooth adapter
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        
        // Load UI
        ReceivedMessage = (TextView) findViewById(R.id.ReceivedMessage);
        DistanceMeasured = (TextView) findViewById(R.id.DistanceMeasured);
        DistanceMeasured.setText("0 m");
        
        
        // If the adapter is null, then Bluetooth is not supported
        if (mBluetoothAdapter == null) 
        {
            Toast.makeText(this, "Bluetooth is not available", Toast.LENGTH_LONG).show();
            finish();
            return;
        }
    }

    @Override
    public void onStart() {
        super.onStart();
       
        // If BT is not on, request that it be enabled.
        // setupChat() will then be called during onActivityResult
        if (!mBluetoothAdapter.isEnabled()) 
        {
            Toast toast = Toast.makeText(this, R.string.bt_not_enabled, Toast.LENGTH_SHORT);
            toast.show();
        // Otherwise, setup the chat session
        } else {
            if (mChatService == null) setupUI();
        }
    }
 
    // The ‘active pointer’ is the one currently moving our object.
    private int mActivePointerId;
    float mLastTouchX;
    float mLastTouchY;
    float mPosX;
    float mPosY;
    float x;
    float y;
    int pointerIndex;
    
    // TEST for the rosace control
    @Override
    public boolean onTouchEvent(MotionEvent ev) {
   
        final int action = MotionEventCompat.getActionMasked(ev); 
            
        switch (action) { 
        case MotionEvent.ACTION_DOWN: 
            pointerIndex = MotionEventCompat.getActionIndex(ev); 
            x = MotionEventCompat.getX(ev, pointerIndex); 
            y = MotionEventCompat.getY(ev, pointerIndex); 
                
            // Remember where we started (for dragging)
             mLastTouchX = x;
             mLastTouchY = y;
            // Save the ID of this pointer (for dragging)
             mActivePointerId = MotionEventCompat.getPointerId(ev, 0);
            break;
        
                
        case MotionEvent.ACTION_MOVE:
            // Find the index of the active pointer and fetch its position
            pointerIndex = MotionEventCompat.findPointerIndex(ev, mActivePointerId);  
                
             x = MotionEventCompat.getX(ev, pointerIndex);
             y = MotionEventCompat.getY(ev, pointerIndex);
                
            // Calculate the distance moved
            float dx = x - mLastTouchX;
            float dy = y - mLastTouchY;

            mPosX += dx;
            mPosY += dy;
            Log.e("TATAAAAK","dx : " + dx + "dy : " + dy);
            break;
            
        case MotionEvent.ACTION_UP:
        	if(dx>0)
        	{
        		Log.e("TATAAAAK","dx : " + dx + "dy : " + dy);
        	}
        }
		return true;
    }
   


    private void setupUI() 
    {
        // Initialize the send button with a listener that for click events
        mStopButton = (Button) findViewById(R.id.stop);
        mStopButton.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                flag_stop_pressed = true;
            }
        });

        // Initialize the BluetoothChatService to perform bluetooth connections
        mChatService = new BluetoothComTestService(this, mHandler);

        // Initialize the buffer for outgoing messages
        mOutStringBuffer = new StringBuffer("");
    }

    protected void openSearch() {
    	Intent i = new Intent(this, DeviceListActivity.class);
    	startActivityForResult(i, REQUEST_CONNECT_DEVICE_SECURE);
    }
    
    // EN TEST
    public void Disconnect() {
    	mChatService.stop();
	}


    @Override
    public void onDestroy() {
        super.onDestroy();
        // Stop the Bluetooth chat services
        if (mChatService != null) mChatService.stop();
    }

    private void ensureDiscoverable() {
    	if (mBluetoothAdapter.getScanMode() != BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {
            Intent discoverableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
            discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300);
            startActivity(discoverableIntent);
        }
    }

    /**
     * Sends a message.
     * @param message  A string of text to send.
     */
    public void sendMessage(String message) {
        // Check that we're actually connected before trying anything
        if (mChatService.getState() != BluetoothComTestService.STATE_CONNECTED) {
            Toast t = Toast.makeText(this, R.string.not_connected, Toast.LENGTH_SHORT);
            t.setGravity(Gravity.CENTER, 0,0);
            t.show();
            return;
        }

        // Check that there's actually something to send
        if (message.length() > 0) {
            // Get the message bytes and tell the BluetoothChatService to write
            byte[] send = message.getBytes();
            mChatService.write(send);

            // Reset out string buffer to zero
            mOutStringBuffer.setLength(0);
        }
    }

    private final void setStatus(int resId) {
        final ActionBar actionBar = getActionBar();
        actionBar.setSubtitle(resId);
    }

    private final void setStatus(CharSequence subTitle) {
        final ActionBar actionBar = getActionBar();
        actionBar.setSubtitle(subTitle);
    }

    // The Handler that gets information back from the BluetoothChatService
    @SuppressLint("HandlerLeak")
	private final Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
        	Toast t;
            switch (msg.what) {
            case MESSAGE_STATE_CHANGE:
                switch (msg.arg1) {
                case BluetoothComTestService.STATE_CONNECTED:
                    setStatus(getString(R.string.title_connected_to, mConnectedDeviceName));
                    break;
                case BluetoothComTestService.STATE_CONNECTING:
                    setStatus(R.string.title_connecting);
                    break;
                case BluetoothComTestService.STATE_LISTEN:
                case BluetoothComTestService.STATE_NONE:
                    setStatus(R.string.title_not_connected);
                    break;
                }
                break;
            case MESSAGE_WRITE:
                byte[] writeBuf = (byte[]) msg.obj;
                // construct a string from the buffer
                String writeMessage = new String(writeBuf); 
                break;
            case MESSAGE_READ:
                byte[] readBuf = (byte[]) msg.obj;
                // construct a string from the valid bytes in the buffer
                String readMessage = new String(readBuf, 0, msg.arg1);
                ReceivedMessage.setText(readMessage);
                break;
                
            case MESSAGE_DEVICE_NAME:
                // save the connected device's name
                mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);
                t = Toast.makeText(getApplicationContext(), "Connected to "
                               + mConnectedDeviceName, Toast.LENGTH_SHORT);
                t.setGravity(Gravity.CENTER, 0,0);
                t.show();
                break;
            case MESSAGE_TOAST:
            	t = Toast.makeText(getApplicationContext(), msg.getData().getString(TOAST),
                               Toast.LENGTH_SHORT);
            	t.setGravity(Gravity.CENTER, 0,0);
                t.show();
                break;
            }
        }
    };

    public void onActivityResult(int requestCode, int resultCode, Intent data) {
       
        switch (requestCode) {
        case REQUEST_CONNECT_DEVICE_SECURE:
            // When DeviceListActivity returns with a device to connect
            if (resultCode == Activity.RESULT_OK) {
                connectDevice(data, true);
            }
            break;
        case REQUEST_ENABLE_BT:
            // When the request to enable Bluetooth returns
            if (resultCode == Activity.RESULT_OK) {
                // Bluetooth is now enabled, so set up a chat session
                setupUI();
            }
        }
    }

    private void connectDevice(Intent data, boolean secure) {
        // Get the device MAC address
        String address = data.getExtras()
            .getString(DeviceListActivity.EXTRA_DEVICE_ADDRESS);
        // Get the BluetoothDevice object
        BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);
        // Attempt to connect to the device
        mChatService.connect(device);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.option_menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        Intent serverIntent = null;
        switch (item.getItemId()) {
        case R.id.secure_connect_scan:
            // Launch the DeviceListActivity to see devices and do scan
        	
        	mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        	
            // If the adapter is null, then Bluetooth is not supported
            if (!mBluetoothAdapter.isEnabled()) {
                Toast toast = Toast.makeText(this, "Bluetooth isn't enabled", Toast.LENGTH_LONG);
                toast.show();
                return true;
            }
            else{
		            serverIntent = new Intent(this, DeviceListActivity.class);
		            startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE_SECURE);
		            return true;
            }
        case R.id.discoverable:
            // Ensure this device is discoverable by others
            ensureDiscoverable();
            return true;   
            
        case R.id.action_disconnect:
			Disconnect();
			return true;
			
		default:
			return super.onOptionsItemSelected(item);
	    }
    }
}
